/* CSS Normalize */
article,aside,details,figcaption,figure,footer,header,hgroup,nav,section,summary{display:block;}audio,canvas,video{display:inline-block;}audio:not([controls]){display:none;height:0;}[hidden]{display:none;}html{font-family:sans-serif;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%;}a:focus{outline:thin dotted;}a:active,a:hover{outline:0;}h1{font-size:2em;}abbr[title]{border-bottom:1px dotted;}b,strong{font-weight:700;}dfn{font-style:italic;}mark{background:#ff0;color:#000;}code,kbd,pre,samp{font-family:monospace, serif;font-size:1em;}pre{white-space:pre-wrap;word-wrap:break-word;}q{quotes:\201C \201D \2018 \2019;}small{font-size:80%;}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline;}sup{top:-.5em;}sub{bottom:-.25em;}img{border:0;}svg:not(:root){overflow:hidden;}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em;}button,input,select,textarea{font-family:inherit;font-size:100%;margin:0;}button,input{line-height:normal;}button,html input[type=button],/* 1 */
input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer;}button[disabled],input[disabled]{cursor:default;}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0;}input[type=search]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box;}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none;}textarea{overflow:auto;vertical-align:top;}table{border-collapse:collapse;border-spacing:0;}body,figure{margin:0;}legend,button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0;}

/* Box-sizing border-box */
* { -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box; }


/* Some default styles to make each box visible */
.box {
  color:white;
  font-size: 100px;
  text-align: center;
  text-shadow:4px 4px 0 rgba(0,0,0,0.1);
  padding:10px;
}

/* Colours for each box */
.box1 { background:#1abc9c;}
.box2 { background:#3498db;}
.box3 { background:#9b59b6;}
.box4 { background:#34495e;}
.box5 { background:#f1c40f;}
.box6 { background:#e67e22;}
.box7 { background:#e74c3c;}
.box8 { background:#bdc3c7;}
.box9 { background:#2ecc71;}
.box10 { background:#16a085;}


/* We start writing out flexbox here. The above is just page setup */

/* Display property ==> (https://www.w3schools.com/cssref/pr_class_display.asp) */
.container {
  display: flex;
  border: 10px solid #fa004f;
  min-height: 100vh;
  /* Step 1 - ¿Qué pasa cuando nuestros elementos, dentro de un contenedor flex, requieren de un espacio mayor del que les ofrece este contenedor? */

  /* Recordamos que por naturaleza flexbox es flexible, a diferencia de otro tipo de display que hay en css que, por defecto, van a colocar el contenido en diferentes líneas */

  /* Step 3 */
  flex-wrap: wrap;

  /* Vemos que han pasado dos cosas, ahora los elementos si que ocupan 300 px cada uno y, ¿qué ha pasado con su height?, veíamos que antes cada uno de los elementos tenían un height igual al espacio disponible y, ¿ahora? */

  /* Por defecto, flex va a tratar de estirarse a lo largo del espacio disponible en su contenedor (siempre y cuando hayamos definido un height) */

  /* Lo que ha pasado es que el contenedor flex ha dicho: Vale, tengo que estirar mis items a lo largo de mi espacio pero, tengo que dividirlo entre los 10 items que conforman un total de 4 filas así que, vamos a asignarles el height necesario a cada uno para que podamos estirarnos en todo el espacio. Así que veremos como ahora los items ocupan más espacio del que necesitan (por su contenido) */

  /* Step 4 - Vemos como afecta modificar el wrap-reverse */
  /* flex-wrap: wrap-reverse; */

  /* Step 6 - ¿Qué pasa si ahora aplicamos column? */
  /* flex-direction: column; */

  /* Al cambiar el eje principal por el que se construye nuestro layout y, tener el contenido "envuelto" en un elemento con un height definido, el navegador va a ir colocando elementos en el eje principal hasta que se quede sin espacio, en ese momento, generará una nueva columna dónde continuará colocando elementos. */

  /* Step 7 - Cambiamos el height por min-height */
  /* height: auto;
  min-height: 100vh; */
}

/* Step 2 - Vamos a asignarle un valor absoluto de ancho a nuestros 'flex-items' .box */
.box {
  width: 300px;
  /* ¿Miden realmente 300px?, ¿qué ha pasado? ¿mi pantalla mide 3000px de ancho? */

  /* Por su propia naturaleza, flexbox va a tratar de trabajar con el ancho que le asignemos a nuestros elementos, pero, si no es posible, va a distribuir el espacio entre ellos de manera equitativa o, va a basarse en la propiedad flex que veremos más adelante */

  /* Step 5 - Rellenando todo el espacio */
  width: 33.33333%;
  /* Esto funciona igual que con otras tecnicas de layout, simplemente vamos a asignar a cada uno de los elementos un tercio del espacio disponible */

  /* Step 8 - ¿Qué pasa si añadimos margin a nuestros flex-items? */
  /* margin: 10px; */

  /* El margen de los elementos no está incluido en el modelado del propio elemento, por lo que, estamos añadiendo 10 px a cada lado de los elementos, ahora miden 33.3% + 20px, ¿cómo podemos hacer para reflejarlo en su width correctamente? (pista, calc) */
  /* width: calc(33.3333% - (10px * 2)); */

  /* Step 9 - ¿y que pása con el padding? */
  padding: 40px;

  /* El padding si está incluído en el modelado del elemento por lo que, no afectará al tamaño final de nuestro item, esto es así, por que dentro de nuestra normalización le hemos dicho que el tamaño de todos nuestros elementos estará definido por el modelo box-sizing: border-box */

  /* Step 10 - ¿y el border? */
  border: 20px solid #3C294D;
}